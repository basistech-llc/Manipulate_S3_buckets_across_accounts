# the purpose of this script is to match the objects in the originating bucket with those in the 
# destination bucket. 

# for this script you need appropriate IAM creds to read both buckets in two separate AWS accounts
# for this to code run, you need to update the bucket names in line 57

import boto3

def list_bucket_objects(bucket_name, s3_client):
    """Retrieve a list of object keys from the specified bucket."""
    paginator = s3_client.get_paginator('list_objects_v2')
    objects = []
    for page in paginator.paginate(Bucket=bucket_name):
        if "Contents" in page:
            objects.extend(obj['Key'] for obj in page['Contents'])
    return objects

def compare_buckets(source_bucket, destination_bucket, source_region='us-east-2', destination_region='us-east-2'):
    """Compare object keys in two buckets and print discrepancies."""
    # Session for source bucket
    source_session = boto3.Session(
        aws_access_key_id=outbound_access_key,  # replace with your source account access key
        aws_secret_access_key=outbound_secret_access_key,  # replace with your source account secret access key
        region_name=source_region
    )
    s3_source = source_session.client('s3')

    # Session for destination bucket
    destination_session = boto3.Session(
        aws_access_key_id=inbound_access_key,  # replace with your destination account access key
        aws_secret_access_key=inbound_secret_access_key,  # replace with your destination account secret access key
        region_name=destination_region
    )
    s3_destination = destination_session.client('s3')

    source_objects = set(list_bucket_objects(source_bucket, s3_source))
    destination_objects = set(list_bucket_objects(destination_bucket, s3_destination))

    only_in_source = source_objects - destination_objects
    only_in_destination = destination_objects - source_objects

    print(f"Objects only in {source_bucket}:")
    for obj in only_in_source:
        print(obj)

    print(f"Objects only in {destination_bucket}:")
    for obj in only_in_destination:
        print(obj)

    if not only_in_source and not only_in_destination:
        print("Both buckets have identical objects.")
    else:
        print("Buckets have discrepancies.")

def main():
    buckets_to_compare = [
        (outbound_bucket_name, inbound_bucket_name)
    ]
    for source, destination in buckets_to_compare:
        compare_buckets(source, destination)

if __name__ == "__main__":
    main()
